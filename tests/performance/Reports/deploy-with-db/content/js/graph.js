/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3982.0, "minX": 0.0, "maxY": 62382.0, "series": [{"data": [[0.0, 3982.0], [0.1, 4139.0], [0.2, 4641.0], [0.3, 4908.0], [0.4, 4922.0], [0.5, 6847.0], [0.6, 7146.0], [0.7, 7291.0], [0.8, 7371.0], [0.9, 7538.0], [1.0, 7553.0], [1.1, 7597.0], [1.2, 7709.0], [1.3, 7761.0], [1.4, 7794.0], [1.5, 7903.0], [1.6, 7931.0], [1.7, 7977.0], [1.8, 8236.0], [1.9, 8245.0], [2.0, 8390.0], [2.1, 8396.0], [2.2, 8419.0], [2.3, 8820.0], [2.4, 8823.0], [2.5, 8886.0], [2.6, 8901.0], [2.7, 8947.0], [2.8, 9072.0], [2.9, 9128.0], [3.0, 9169.0], [3.1, 9177.0], [3.2, 9212.0], [3.3, 9266.0], [3.4, 9403.0], [3.5, 9520.0], [3.6, 9589.0], [3.7, 9645.0], [3.8, 9687.0], [3.9, 9692.0], [4.0, 9817.0], [4.1, 9895.0], [4.2, 9928.0], [4.3, 9943.0], [4.4, 9976.0], [4.5, 10024.0], [4.6, 10049.0], [4.7, 10094.0], [4.8, 10183.0], [4.9, 10190.0], [5.0, 10308.0], [5.1, 10570.0], [5.2, 10675.0], [5.3, 10679.0], [5.4, 10703.0], [5.5, 10708.0], [5.6, 10734.0], [5.7, 10792.0], [5.8, 10867.0], [5.9, 10991.0], [6.0, 11047.0], [6.1, 11074.0], [6.2, 11261.0], [6.3, 11390.0], [6.4, 11398.0], [6.5, 11564.0], [6.6, 11570.0], [6.7, 11601.0], [6.8, 11608.0], [6.9, 11672.0], [7.0, 11784.0], [7.1, 11863.0], [7.2, 11928.0], [7.3, 11963.0], [7.4, 11968.0], [7.5, 11992.0], [7.6, 12149.0], [7.7, 12254.0], [7.8, 12289.0], [7.9, 12390.0], [8.0, 12740.0], [8.1, 12825.0], [8.2, 12828.0], [8.3, 12889.0], [8.4, 12976.0], [8.5, 12987.0], [8.6, 13035.0], [8.7, 13076.0], [8.8, 13215.0], [8.9, 13239.0], [9.0, 13305.0], [9.1, 13618.0], [9.2, 13692.0], [9.3, 13749.0], [9.4, 13921.0], [9.5, 14067.0], [9.6, 14072.0], [9.7, 14087.0], [9.8, 14091.0], [9.9, 14102.0], [10.0, 14124.0], [10.1, 14286.0], [10.2, 14317.0], [10.3, 14331.0], [10.4, 14345.0], [10.5, 14493.0], [10.6, 14539.0], [10.7, 14604.0], [10.8, 14622.0], [10.9, 14639.0], [11.0, 14668.0], [11.1, 14707.0], [11.2, 14747.0], [11.3, 14943.0], [11.4, 15021.0], [11.5, 15163.0], [11.6, 15193.0], [11.7, 15250.0], [11.8, 15285.0], [11.9, 15290.0], [12.0, 15379.0], [12.1, 15513.0], [12.2, 15524.0], [12.3, 15525.0], [12.4, 15560.0], [12.5, 15583.0], [12.6, 15631.0], [12.7, 15633.0], [12.8, 15637.0], [12.9, 15673.0], [13.0, 15680.0], [13.1, 16010.0], [13.2, 16199.0], [13.3, 16207.0], [13.4, 16229.0], [13.5, 16263.0], [13.6, 16330.0], [13.7, 16378.0], [13.8, 16466.0], [13.9, 16542.0], [14.0, 16591.0], [14.1, 16651.0], [14.2, 16689.0], [14.3, 16723.0], [14.4, 16773.0], [14.5, 16893.0], [14.6, 16917.0], [14.7, 16961.0], [14.8, 16979.0], [14.9, 17009.0], [15.0, 17065.0], [15.1, 17176.0], [15.2, 17178.0], [15.3, 17186.0], [15.4, 17261.0], [15.5, 17407.0], [15.6, 17413.0], [15.7, 17424.0], [15.8, 17439.0], [15.9, 17453.0], [16.0, 17481.0], [16.1, 17593.0], [16.2, 17639.0], [16.3, 17656.0], [16.4, 17679.0], [16.5, 18019.0], [16.6, 18196.0], [16.7, 18286.0], [16.8, 18316.0], [16.9, 18347.0], [17.0, 18388.0], [17.1, 18485.0], [17.2, 18565.0], [17.3, 18600.0], [17.4, 18662.0], [17.5, 18674.0], [17.6, 18764.0], [17.7, 18768.0], [17.8, 18791.0], [17.9, 18797.0], [18.0, 18850.0], [18.1, 18953.0], [18.2, 18953.0], [18.3, 18990.0], [18.4, 19043.0], [18.5, 19079.0], [18.6, 19114.0], [18.7, 19281.0], [18.8, 19315.0], [18.9, 19366.0], [19.0, 19388.0], [19.1, 19414.0], [19.2, 19433.0], [19.3, 19449.0], [19.4, 19451.0], [19.5, 19464.0], [19.6, 19505.0], [19.7, 19532.0], [19.8, 19577.0], [19.9, 19583.0], [20.0, 19589.0], [20.1, 19666.0], [20.2, 19719.0], [20.3, 19768.0], [20.4, 19771.0], [20.5, 19796.0], [20.6, 19835.0], [20.7, 19846.0], [20.8, 19885.0], [20.9, 19980.0], [21.0, 19993.0], [21.1, 20054.0], [21.2, 20179.0], [21.3, 20197.0], [21.4, 20208.0], [21.5, 20223.0], [21.6, 20252.0], [21.7, 20272.0], [21.8, 20461.0], [21.9, 20505.0], [22.0, 20602.0], [22.1, 20780.0], [22.2, 20803.0], [22.3, 20836.0], [22.4, 20901.0], [22.5, 20903.0], [22.6, 20934.0], [22.7, 20968.0], [22.8, 21099.0], [22.9, 21223.0], [23.0, 21233.0], [23.1, 21290.0], [23.2, 21396.0], [23.3, 21461.0], [23.4, 21494.0], [23.5, 21569.0], [23.6, 21723.0], [23.7, 21763.0], [23.8, 21777.0], [23.9, 21807.0], [24.0, 21824.0], [24.1, 21853.0], [24.2, 21858.0], [24.3, 21899.0], [24.4, 21919.0], [24.5, 21954.0], [24.6, 21980.0], [24.7, 22019.0], [24.8, 22058.0], [24.9, 22081.0], [25.0, 22101.0], [25.1, 22135.0], [25.2, 22342.0], [25.3, 22386.0], [25.4, 22439.0], [25.5, 22485.0], [25.6, 22571.0], [25.7, 22583.0], [25.8, 22594.0], [25.9, 22683.0], [26.0, 22795.0], [26.1, 22886.0], [26.2, 22894.0], [26.3, 22950.0], [26.4, 23185.0], [26.5, 23450.0], [26.6, 23479.0], [26.7, 23488.0], [26.8, 23520.0], [26.9, 23585.0], [27.0, 23793.0], [27.1, 23814.0], [27.2, 23825.0], [27.3, 23836.0], [27.4, 23852.0], [27.5, 23958.0], [27.6, 24025.0], [27.7, 24040.0], [27.8, 24075.0], [27.9, 24111.0], [28.0, 24276.0], [28.1, 24335.0], [28.2, 24385.0], [28.3, 24463.0], [28.4, 24540.0], [28.5, 24617.0], [28.6, 24715.0], [28.7, 24724.0], [28.8, 24750.0], [28.9, 24815.0], [29.0, 25011.0], [29.1, 25011.0], [29.2, 25052.0], [29.3, 25082.0], [29.4, 25128.0], [29.5, 25294.0], [29.6, 25354.0], [29.7, 25355.0], [29.8, 25435.0], [29.9, 25445.0], [30.0, 25526.0], [30.1, 25648.0], [30.2, 25718.0], [30.3, 25773.0], [30.4, 25846.0], [30.5, 25913.0], [30.6, 26020.0], [30.7, 26080.0], [30.8, 26096.0], [30.9, 26104.0], [31.0, 26186.0], [31.1, 26251.0], [31.2, 26256.0], [31.3, 26282.0], [31.4, 26326.0], [31.5, 26350.0], [31.6, 26350.0], [31.7, 26377.0], [31.8, 26387.0], [31.9, 26391.0], [32.0, 26492.0], [32.1, 26511.0], [32.2, 26529.0], [32.3, 26556.0], [32.4, 26574.0], [32.5, 26658.0], [32.6, 26703.0], [32.7, 26751.0], [32.8, 26774.0], [32.9, 26779.0], [33.0, 26818.0], [33.1, 26818.0], [33.2, 26827.0], [33.3, 26837.0], [33.4, 27014.0], [33.5, 27066.0], [33.6, 27077.0], [33.7, 27095.0], [33.8, 27150.0], [33.9, 27174.0], [34.0, 27245.0], [34.1, 27257.0], [34.2, 27325.0], [34.3, 27466.0], [34.4, 27480.0], [34.5, 27575.0], [34.6, 27621.0], [34.7, 27664.0], [34.8, 27773.0], [34.9, 27786.0], [35.0, 27859.0], [35.1, 27881.0], [35.2, 27909.0], [35.3, 28071.0], [35.4, 28229.0], [35.5, 28354.0], [35.6, 28570.0], [35.7, 28732.0], [35.8, 28739.0], [35.9, 28883.0], [36.0, 28885.0], [36.1, 29040.0], [36.2, 29040.0], [36.3, 29117.0], [36.4, 29119.0], [36.5, 29123.0], [36.6, 29170.0], [36.7, 29229.0], [36.8, 29342.0], [36.9, 29469.0], [37.0, 29480.0], [37.1, 29642.0], [37.2, 29654.0], [37.3, 29716.0], [37.4, 29737.0], [37.5, 29748.0], [37.6, 29756.0], [37.7, 29859.0], [37.8, 29881.0], [37.9, 29887.0], [38.0, 29904.0], [38.1, 30066.0], [38.2, 30130.0], [38.3, 30156.0], [38.4, 30202.0], [38.5, 30229.0], [38.6, 30241.0], [38.7, 30349.0], [38.8, 30356.0], [38.9, 30379.0], [39.0, 30411.0], [39.1, 30638.0], [39.2, 30735.0], [39.3, 30736.0], [39.4, 30769.0], [39.5, 30852.0], [39.6, 30902.0], [39.7, 30982.0], [39.8, 31151.0], [39.9, 31235.0], [40.0, 31325.0], [40.1, 31394.0], [40.2, 31471.0], [40.3, 31529.0], [40.4, 31626.0], [40.5, 31638.0], [40.6, 31647.0], [40.7, 31722.0], [40.8, 31740.0], [40.9, 31755.0], [41.0, 31755.0], [41.1, 31792.0], [41.2, 31842.0], [41.3, 31956.0], [41.4, 31964.0], [41.5, 32006.0], [41.6, 32011.0], [41.7, 32054.0], [41.8, 32081.0], [41.9, 32095.0], [42.0, 32104.0], [42.1, 32190.0], [42.2, 32286.0], [42.3, 32450.0], [42.4, 32460.0], [42.5, 32470.0], [42.6, 32601.0], [42.7, 32604.0], [42.8, 32725.0], [42.9, 32780.0], [43.0, 32924.0], [43.1, 33074.0], [43.2, 33169.0], [43.3, 33183.0], [43.4, 33220.0], [43.5, 33259.0], [43.6, 33280.0], [43.7, 33298.0], [43.8, 33304.0], [43.9, 33394.0], [44.0, 33434.0], [44.1, 33459.0], [44.2, 33474.0], [44.3, 33476.0], [44.4, 33486.0], [44.5, 33503.0], [44.6, 33656.0], [44.7, 33676.0], [44.8, 33682.0], [44.9, 33878.0], [45.0, 33893.0], [45.1, 34111.0], [45.2, 34122.0], [45.3, 34135.0], [45.4, 34222.0], [45.5, 34274.0], [45.6, 34322.0], [45.7, 34322.0], [45.8, 34358.0], [45.9, 34376.0], [46.0, 34386.0], [46.1, 34573.0], [46.2, 34579.0], [46.3, 34632.0], [46.4, 34689.0], [46.5, 34710.0], [46.6, 34852.0], [46.7, 35156.0], [46.8, 35183.0], [46.9, 35340.0], [47.0, 35534.0], [47.1, 35561.0], [47.2, 35727.0], [47.3, 35818.0], [47.4, 35850.0], [47.5, 35857.0], [47.6, 35876.0], [47.7, 35921.0], [47.8, 35942.0], [47.9, 35947.0], [48.0, 36011.0], [48.1, 36109.0], [48.2, 36123.0], [48.3, 36164.0], [48.4, 36169.0], [48.5, 36183.0], [48.6, 36233.0], [48.7, 36253.0], [48.8, 36273.0], [48.9, 36304.0], [49.0, 36316.0], [49.1, 36336.0], [49.2, 36352.0], [49.3, 36362.0], [49.4, 36385.0], [49.5, 36391.0], [49.6, 36424.0], [49.7, 36564.0], [49.8, 36590.0], [49.9, 36642.0], [50.0, 36646.0], [50.1, 36705.0], [50.2, 36754.0], [50.3, 36763.0], [50.4, 36785.0], [50.5, 36817.0], [50.6, 36857.0], [50.7, 36878.0], [50.8, 36884.0], [50.9, 36903.0], [51.0, 36916.0], [51.1, 37065.0], [51.2, 37082.0], [51.3, 37087.0], [51.4, 37189.0], [51.5, 37230.0], [51.6, 37285.0], [51.7, 37385.0], [51.8, 37393.0], [51.9, 37449.0], [52.0, 37517.0], [52.1, 37558.0], [52.2, 37559.0], [52.3, 37573.0], [52.4, 37599.0], [52.5, 37620.0], [52.6, 37635.0], [52.7, 37641.0], [52.8, 37804.0], [52.9, 37842.0], [53.0, 37859.0], [53.1, 37980.0], [53.2, 37984.0], [53.3, 38061.0], [53.4, 38088.0], [53.5, 38177.0], [53.6, 38256.0], [53.7, 38286.0], [53.8, 38354.0], [53.9, 38506.0], [54.0, 38644.0], [54.1, 38783.0], [54.2, 38824.0], [54.3, 38901.0], [54.4, 38992.0], [54.5, 39017.0], [54.6, 39038.0], [54.7, 39068.0], [54.8, 39097.0], [54.9, 39184.0], [55.0, 39236.0], [55.1, 39250.0], [55.2, 39336.0], [55.3, 39409.0], [55.4, 39430.0], [55.5, 39444.0], [55.6, 39462.0], [55.7, 39514.0], [55.8, 39526.0], [55.9, 39528.0], [56.0, 39599.0], [56.1, 39606.0], [56.2, 39714.0], [56.3, 39779.0], [56.4, 39782.0], [56.5, 39818.0], [56.6, 39833.0], [56.7, 39853.0], [56.8, 39995.0], [56.9, 40011.0], [57.0, 40085.0], [57.1, 40278.0], [57.2, 40289.0], [57.3, 40310.0], [57.4, 40349.0], [57.5, 40386.0], [57.6, 40443.0], [57.7, 40474.0], [57.8, 40481.0], [57.9, 40579.0], [58.0, 40619.0], [58.1, 40650.0], [58.2, 40709.0], [58.3, 40730.0], [58.4, 40816.0], [58.5, 40818.0], [58.6, 40825.0], [58.7, 40960.0], [58.8, 40981.0], [58.9, 40988.0], [59.0, 41217.0], [59.1, 41295.0], [59.2, 41331.0], [59.3, 41384.0], [59.4, 41459.0], [59.5, 41492.0], [59.6, 41513.0], [59.7, 41543.0], [59.8, 41697.0], [59.9, 41736.0], [60.0, 41798.0], [60.1, 41862.0], [60.2, 41886.0], [60.3, 41909.0], [60.4, 41929.0], [60.5, 42049.0], [60.6, 42084.0], [60.7, 42096.0], [60.8, 42126.0], [60.9, 42248.0], [61.0, 42271.0], [61.1, 42288.0], [61.2, 42323.0], [61.3, 42356.0], [61.4, 42365.0], [61.5, 42543.0], [61.6, 42549.0], [61.7, 42597.0], [61.8, 42643.0], [61.9, 42686.0], [62.0, 42708.0], [62.1, 42867.0], [62.2, 42927.0], [62.3, 42947.0], [62.4, 43047.0], [62.5, 43058.0], [62.6, 43064.0], [62.7, 43080.0], [62.8, 43087.0], [62.9, 43103.0], [63.0, 43115.0], [63.1, 43295.0], [63.2, 43308.0], [63.3, 43453.0], [63.4, 43458.0], [63.5, 43462.0], [63.6, 43463.0], [63.7, 43482.0], [63.8, 43488.0], [63.9, 43524.0], [64.0, 43577.0], [64.1, 43727.0], [64.2, 43744.0], [64.3, 43763.0], [64.4, 43788.0], [64.5, 43989.0], [64.6, 44108.0], [64.7, 44154.0], [64.8, 44181.0], [64.9, 44220.0], [65.0, 44244.0], [65.1, 44367.0], [65.2, 44382.0], [65.3, 44391.0], [65.4, 44433.0], [65.5, 44490.0], [65.6, 44558.0], [65.7, 44609.0], [65.8, 44618.0], [65.9, 44641.0], [66.0, 44725.0], [66.1, 44748.0], [66.2, 44794.0], [66.3, 44921.0], [66.4, 45110.0], [66.5, 46045.0], [66.6, 46178.0], [66.7, 46245.0], [66.8, 46335.0], [66.9, 46365.0], [67.0, 46464.0], [67.1, 46542.0], [67.2, 46584.0], [67.3, 46592.0], [67.4, 46626.0], [67.5, 46788.0], [67.6, 46823.0], [67.7, 46840.0], [67.8, 46879.0], [67.9, 46909.0], [68.0, 46932.0], [68.1, 46995.0], [68.2, 47016.0], [68.3, 47039.0], [68.4, 47050.0], [68.5, 47089.0], [68.6, 47129.0], [68.7, 47160.0], [68.8, 47213.0], [68.9, 47278.0], [69.0, 47278.0], [69.1, 47351.0], [69.2, 47362.0], [69.3, 47395.0], [69.4, 47491.0], [69.5, 47500.0], [69.6, 47509.0], [69.7, 47592.0], [69.8, 47654.0], [69.9, 47749.0], [70.0, 47831.0], [70.1, 47939.0], [70.2, 47954.0], [70.3, 47965.0], [70.4, 48154.0], [70.5, 48161.0], [70.6, 48165.0], [70.7, 48193.0], [70.8, 48200.0], [70.9, 48216.0], [71.0, 48220.0], [71.1, 48225.0], [71.2, 48228.0], [71.3, 48228.0], [71.4, 48331.0], [71.5, 48347.0], [71.6, 48384.0], [71.7, 48406.0], [71.8, 48434.0], [71.9, 48442.0], [72.0, 48455.0], [72.1, 48494.0], [72.2, 48537.0], [72.3, 48542.0], [72.4, 48559.0], [72.5, 48634.0], [72.6, 48700.0], [72.7, 48804.0], [72.8, 48891.0], [72.9, 48905.0], [73.0, 48970.0], [73.1, 49091.0], [73.2, 49146.0], [73.3, 49192.0], [73.4, 49259.0], [73.5, 49291.0], [73.6, 49323.0], [73.7, 49485.0], [73.8, 49554.0], [73.9, 49573.0], [74.0, 49613.0], [74.1, 49625.0], [74.2, 49718.0], [74.3, 49735.0], [74.4, 49736.0], [74.5, 49769.0], [74.6, 49879.0], [74.7, 49921.0], [74.8, 50028.0], [74.9, 50050.0], [75.0, 50090.0], [75.1, 50190.0], [75.2, 50279.0], [75.3, 50282.0], [75.4, 50307.0], [75.5, 50407.0], [75.6, 50455.0], [75.7, 50460.0], [75.8, 50463.0], [75.9, 50493.0], [76.0, 50516.0], [76.1, 50645.0], [76.2, 50714.0], [76.3, 50781.0], [76.4, 50817.0], [76.5, 50837.0], [76.6, 50854.0], [76.7, 50868.0], [76.8, 50904.0], [76.9, 50919.0], [77.0, 51003.0], [77.1, 51070.0], [77.2, 51091.0], [77.3, 51129.0], [77.4, 51157.0], [77.5, 51195.0], [77.6, 51227.0], [77.7, 51311.0], [77.8, 51413.0], [77.9, 51567.0], [78.0, 51585.0], [78.1, 51741.0], [78.2, 51761.0], [78.3, 51808.0], [78.4, 51953.0], [78.5, 52061.0], [78.6, 52144.0], [78.7, 52153.0], [78.8, 52166.0], [78.9, 52180.0], [79.0, 52188.0], [79.1, 52266.0], [79.2, 52335.0], [79.3, 52337.0], [79.4, 52368.0], [79.5, 52404.0], [79.6, 52462.0], [79.7, 52512.0], [79.8, 52520.0], [79.9, 52674.0], [80.0, 52788.0], [80.1, 52856.0], [80.2, 52889.0], [80.3, 52957.0], [80.4, 53114.0], [80.5, 53118.0], [80.6, 53120.0], [80.7, 53162.0], [80.8, 53180.0], [80.9, 53184.0], [81.0, 53198.0], [81.1, 53327.0], [81.2, 53441.0], [81.3, 53442.0], [81.4, 53495.0], [81.5, 53507.0], [81.6, 53635.0], [81.7, 53641.0], [81.8, 53711.0], [81.9, 53732.0], [82.0, 53837.0], [82.1, 53869.0], [82.2, 53874.0], [82.3, 53891.0], [82.4, 53892.0], [82.5, 53968.0], [82.6, 54028.0], [82.7, 54034.0], [82.8, 54135.0], [82.9, 54213.0], [83.0, 54330.0], [83.1, 54354.0], [83.2, 54364.0], [83.3, 54475.0], [83.4, 54503.0], [83.5, 54572.0], [83.6, 54572.0], [83.7, 54574.0], [83.8, 54588.0], [83.9, 54601.0], [84.0, 54606.0], [84.1, 54758.0], [84.2, 54786.0], [84.3, 54851.0], [84.4, 54889.0], [84.5, 54891.0], [84.6, 54916.0], [84.7, 54977.0], [84.8, 55000.0], [84.9, 55028.0], [85.0, 55055.0], [85.1, 55145.0], [85.2, 55181.0], [85.3, 55272.0], [85.4, 55319.0], [85.5, 55370.0], [85.6, 55469.0], [85.7, 55509.0], [85.8, 55535.0], [85.9, 55555.0], [86.0, 55652.0], [86.1, 55758.0], [86.2, 55783.0], [86.3, 55808.0], [86.4, 55968.0], [86.5, 55995.0], [86.6, 56007.0], [86.7, 56056.0], [86.8, 56093.0], [86.9, 56240.0], [87.0, 56259.0], [87.1, 56321.0], [87.2, 56344.0], [87.3, 56391.0], [87.4, 56418.0], [87.5, 56441.0], [87.6, 56501.0], [87.7, 56517.0], [87.8, 56525.0], [87.9, 56575.0], [88.0, 56581.0], [88.1, 56635.0], [88.2, 56640.0], [88.3, 56651.0], [88.4, 56661.0], [88.5, 56712.0], [88.6, 56808.0], [88.7, 56815.0], [88.8, 56885.0], [88.9, 56888.0], [89.0, 56911.0], [89.1, 56935.0], [89.2, 56976.0], [89.3, 56984.0], [89.4, 56986.0], [89.5, 57112.0], [89.6, 57131.0], [89.7, 57154.0], [89.8, 57188.0], [89.9, 57306.0], [90.0, 57315.0], [90.1, 57537.0], [90.2, 57566.0], [90.3, 57582.0], [90.4, 57592.0], [90.5, 57695.0], [90.6, 57701.0], [90.7, 57713.0], [90.8, 57716.0], [90.9, 57761.0], [91.0, 57885.0], [91.1, 57894.0], [91.2, 57992.0], [91.3, 58051.0], [91.4, 58083.0], [91.5, 58088.0], [91.6, 58092.0], [91.7, 58212.0], [91.8, 58238.0], [91.9, 58253.0], [92.0, 58257.0], [92.1, 58294.0], [92.2, 58358.0], [92.3, 58422.0], [92.4, 58476.0], [92.5, 58495.0], [92.6, 58535.0], [92.7, 58547.0], [92.8, 58644.0], [92.9, 58668.0], [93.0, 58695.0], [93.1, 58760.0], [93.2, 58788.0], [93.3, 58939.0], [93.4, 58985.0], [93.5, 58990.0], [93.6, 59005.0], [93.7, 59042.0], [93.8, 59052.0], [93.9, 59132.0], [94.0, 59359.0], [94.1, 59374.0], [94.2, 59397.0], [94.3, 59402.0], [94.4, 59443.0], [94.5, 59445.0], [94.6, 59515.0], [94.7, 59550.0], [94.8, 59586.0], [94.9, 59595.0], [95.0, 59634.0], [95.1, 59696.0], [95.2, 59698.0], [95.3, 59776.0], [95.4, 59813.0], [95.5, 59871.0], [95.6, 59910.0], [95.7, 60004.0], [95.8, 60010.0], [95.9, 60088.0], [96.0, 60188.0], [96.1, 60203.0], [96.2, 60286.0], [96.3, 60287.0], [96.4, 60356.0], [96.5, 60393.0], [96.6, 60399.0], [96.7, 60425.0], [96.8, 60442.0], [96.9, 60475.0], [97.0, 60496.0], [97.1, 60582.0], [97.2, 60624.0], [97.3, 60654.0], [97.4, 60699.0], [97.5, 60760.0], [97.6, 60861.0], [97.7, 60886.0], [97.8, 60952.0], [97.9, 60986.0], [98.0, 61088.0], [98.1, 61164.0], [98.2, 61206.0], [98.3, 61233.0], [98.4, 61287.0], [98.5, 61296.0], [98.6, 61376.0], [98.7, 61414.0], [98.8, 61426.0], [98.9, 61470.0], [99.0, 61567.0], [99.1, 61658.0], [99.2, 61712.0], [99.3, 61783.0], [99.4, 61789.0], [99.5, 61816.0], [99.6, 62084.0], [99.7, 62096.0], [99.8, 62168.0], [99.9, 62179.0], [100.0, 62382.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3900.0, "maxY": 8.0, "series": [{"data": [[32900.0, 1.0], [34500.0, 3.0], [35300.0, 1.0], [36100.0, 5.0], [36900.0, 3.0], [38500.0, 1.0], [39300.0, 1.0], [40100.0, 1.0], [40900.0, 3.0], [41700.0, 2.0], [42500.0, 3.0], [43300.0, 1.0], [44100.0, 3.0], [44900.0, 1.0], [46500.0, 3.0], [47300.0, 3.0], [48100.0, 4.0], [48900.0, 2.0], [49700.0, 4.0], [50500.0, 2.0], [51300.0, 1.0], [52100.0, 5.0], [52900.0, 1.0], [53700.0, 2.0], [54500.0, 5.0], [55300.0, 2.0], [56900.0, 6.0], [57700.0, 4.0], [59300.0, 4.0], [58500.0, 2.0], [60100.0, 1.0], [60900.0, 2.0], [61700.0, 3.0], [3900.0, 1.0], [4100.0, 1.0], [4600.0, 1.0], [4900.0, 2.0], [6800.0, 1.0], [7100.0, 1.0], [7200.0, 1.0], [7300.0, 1.0], [7500.0, 4.0], [7700.0, 3.0], [7900.0, 3.0], [8200.0, 2.0], [8400.0, 1.0], [9200.0, 2.0], [8800.0, 3.0], [9000.0, 1.0], [9600.0, 3.0], [9400.0, 1.0], [9800.0, 2.0], [10200.0, 1.0], [10000.0, 3.0], [10600.0, 2.0], [10800.0, 1.0], [11000.0, 2.0], [11200.0, 1.0], [11600.0, 3.0], [11800.0, 1.0], [12200.0, 2.0], [13000.0, 2.0], [13200.0, 2.0], [12800.0, 3.0], [13600.0, 2.0], [14000.0, 4.0], [14200.0, 2.0], [14600.0, 5.0], [14400.0, 1.0], [15200.0, 3.0], [15000.0, 1.0], [15600.0, 5.0], [16000.0, 1.0], [16200.0, 3.0], [16400.0, 1.0], [16800.0, 1.0], [17200.0, 1.0], [17600.0, 3.0], [18000.0, 1.0], [18400.0, 1.0], [18800.0, 2.0], [19200.0, 1.0], [19600.0, 2.0], [20000.0, 2.0], [20400.0, 1.0], [20800.0, 2.0], [21200.0, 4.0], [22000.0, 3.0], [22400.0, 2.0], [22800.0, 2.0], [23600.0, 1.0], [24000.0, 3.0], [24400.0, 1.0], [24800.0, 1.0], [25200.0, 1.0], [25600.0, 1.0], [26400.0, 2.0], [26000.0, 3.0], [26800.0, 5.0], [27200.0, 2.0], [27600.0, 2.0], [28000.0, 1.0], [28800.0, 2.0], [29200.0, 1.0], [29600.0, 3.0], [30000.0, 2.0], [30400.0, 1.0], [30800.0, 1.0], [31600.0, 3.0], [31200.0, 1.0], [32000.0, 5.0], [32400.0, 3.0], [33600.0, 3.0], [36000.0, 2.0], [36800.0, 4.0], [37600.0, 3.0], [39200.0, 3.0], [40000.0, 2.0], [40800.0, 3.0], [41600.0, 1.0], [43200.0, 1.0], [46400.0, 2.0], [47200.0, 4.0], [48800.0, 2.0], [49600.0, 3.0], [50400.0, 5.0], [51200.0, 1.0], [52000.0, 1.0], [52800.0, 3.0], [53600.0, 2.0], [54400.0, 1.0], [55200.0, 1.0], [56000.0, 3.0], [56800.0, 4.0], [57600.0, 1.0], [58400.0, 3.0], [60000.0, 3.0], [60800.0, 2.0], [61600.0, 2.0], [33100.0, 2.0], [34700.0, 1.0], [35500.0, 3.0], [36300.0, 8.0], [37100.0, 1.0], [37900.0, 3.0], [38700.0, 1.0], [39500.0, 4.0], [40300.0, 3.0], [41900.0, 2.0], [42700.0, 2.0], [43500.0, 2.0], [44300.0, 3.0], [45100.0, 1.0], [46700.0, 1.0], [47500.0, 3.0], [48300.0, 3.0], [49100.0, 2.0], [49900.0, 1.0], [50700.0, 2.0], [51500.0, 2.0], [52300.0, 3.0], [53100.0, 7.0], [53900.0, 1.0], [54700.0, 2.0], [55500.0, 3.0], [56300.0, 4.0], [57100.0, 4.0], [57900.0, 1.0], [58700.0, 3.0], [59500.0, 4.0], [60300.0, 3.0], [61100.0, 2.0], [16500.0, 2.0], [16900.0, 3.0], [18100.0, 1.0], [18500.0, 1.0], [19300.0, 4.0], [18900.0, 3.0], [19700.0, 4.0], [20100.0, 2.0], [20500.0, 1.0], [20900.0, 4.0], [21300.0, 1.0], [21700.0, 3.0], [22100.0, 3.0], [22500.0, 3.0], [22900.0, 1.0], [23700.0, 1.0], [24100.0, 2.0], [24500.0, 1.0], [25300.0, 2.0], [24900.0, 1.0], [25700.0, 2.0], [26100.0, 3.0], [26500.0, 4.0], [27300.0, 1.0], [27700.0, 2.0], [28500.0, 1.0], [29300.0, 1.0], [29700.0, 4.0], [30100.0, 2.0], [30500.0, 1.0], [30900.0, 2.0], [31300.0, 3.0], [31700.0, 6.0], [32100.0, 3.0], [33000.0, 2.0], [33800.0, 2.0], [34600.0, 2.0], [36200.0, 3.0], [37000.0, 3.0], [37800.0, 3.0], [38600.0, 2.0], [39400.0, 4.0], [40200.0, 2.0], [41800.0, 3.0], [42600.0, 2.0], [43400.0, 6.0], [44200.0, 3.0], [46600.0, 1.0], [47400.0, 1.0], [48200.0, 7.0], [49000.0, 2.0], [49800.0, 1.0], [50600.0, 1.0], [51400.0, 1.0], [52200.0, 2.0], [53800.0, 6.0], [54600.0, 3.0], [55400.0, 1.0], [56200.0, 2.0], [57800.0, 3.0], [58600.0, 3.0], [59400.0, 3.0], [60200.0, 4.0], [61000.0, 1.0], [61800.0, 1.0], [33300.0, 2.0], [34100.0, 3.0], [35700.0, 1.0], [36500.0, 2.0], [37300.0, 2.0], [38900.0, 2.0], [38100.0, 1.0], [39700.0, 3.0], [40500.0, 1.0], [41300.0, 2.0], [42100.0, 1.0], [42900.0, 2.0], [43700.0, 5.0], [44500.0, 1.0], [46100.0, 1.0], [46900.0, 4.0], [47700.0, 1.0], [48500.0, 3.0], [49300.0, 1.0], [50100.0, 2.0], [50900.0, 2.0], [51700.0, 2.0], [52500.0, 2.0], [53300.0, 2.0], [54100.0, 1.0], [54900.0, 2.0], [55700.0, 3.0], [56500.0, 6.0], [57300.0, 2.0], [58900.0, 3.0], [59700.0, 1.0], [60500.0, 2.0], [61300.0, 1.0], [62100.0, 2.0], [8300.0, 3.0], [9100.0, 4.0], [8900.0, 2.0], [9700.0, 1.0], [9500.0, 2.0], [9900.0, 3.0], [10100.0, 2.0], [10500.0, 1.0], [10700.0, 4.0], [10300.0, 1.0], [10900.0, 2.0], [11300.0, 2.0], [11500.0, 2.0], [11700.0, 2.0], [11900.0, 4.0], [12100.0, 1.0], [12300.0, 1.0], [12700.0, 1.0], [12500.0, 1.0], [12900.0, 2.0], [13300.0, 2.0], [13700.0, 1.0], [14100.0, 2.0], [14300.0, 3.0], [13900.0, 1.0], [14700.0, 2.0], [14500.0, 1.0], [14900.0, 1.0], [15300.0, 2.0], [15100.0, 2.0], [15500.0, 5.0], [16100.0, 1.0], [15900.0, 1.0], [16300.0, 2.0], [17000.0, 3.0], [16600.0, 3.0], [17400.0, 6.0], [18200.0, 1.0], [18600.0, 3.0], [19400.0, 5.0], [19000.0, 2.0], [19800.0, 3.0], [20200.0, 4.0], [20600.0, 2.0], [21000.0, 1.0], [21400.0, 2.0], [21800.0, 6.0], [22600.0, 1.0], [23400.0, 3.0], [23800.0, 4.0], [24200.0, 1.0], [25000.0, 4.0], [24600.0, 1.0], [25400.0, 3.0], [25800.0, 1.0], [26200.0, 3.0], [26600.0, 1.0], [27400.0, 2.0], [27000.0, 4.0], [27800.0, 3.0], [28200.0, 1.0], [29000.0, 3.0], [29400.0, 2.0], [29800.0, 3.0], [30200.0, 3.0], [30600.0, 1.0], [31400.0, 1.0], [31800.0, 1.0], [32200.0, 1.0], [32600.0, 2.0], [33200.0, 4.0], [34000.0, 1.0], [34800.0, 1.0], [36400.0, 1.0], [37200.0, 2.0], [38000.0, 2.0], [38800.0, 1.0], [39600.0, 2.0], [40400.0, 3.0], [41200.0, 3.0], [42000.0, 3.0], [42800.0, 1.0], [44400.0, 2.0], [46000.0, 1.0], [46800.0, 3.0], [47600.0, 1.0], [48400.0, 6.0], [49200.0, 2.0], [50000.0, 3.0], [50800.0, 4.0], [51600.0, 1.0], [52400.0, 2.0], [54000.0, 2.0], [54800.0, 3.0], [55600.0, 1.0], [56400.0, 2.0], [58000.0, 4.0], [59600.0, 4.0], [60400.0, 4.0], [61200.0, 4.0], [62000.0, 2.0], [33500.0, 1.0], [34300.0, 5.0], [35100.0, 2.0], [35900.0, 3.0], [36700.0, 4.0], [37500.0, 6.0], [38300.0, 1.0], [39100.0, 1.0], [40700.0, 2.0], [39900.0, 1.0], [41500.0, 2.0], [42300.0, 3.0], [43100.0, 3.0], [43900.0, 1.0], [44700.0, 4.0], [46300.0, 2.0], [47100.0, 2.0], [47900.0, 3.0], [48700.0, 1.0], [49500.0, 2.0], [50300.0, 1.0], [51100.0, 3.0], [51900.0, 1.0], [52700.0, 1.0], [53500.0, 1.0], [54300.0, 4.0], [55100.0, 3.0], [55900.0, 2.0], [56700.0, 1.0], [57500.0, 4.0], [58300.0, 1.0], [59100.0, 1.0], [59900.0, 1.0], [60700.0, 1.0], [61500.0, 1.0], [62300.0, 1.0], [16700.0, 2.0], [17100.0, 3.0], [17500.0, 2.0], [18300.0, 4.0], [18700.0, 4.0], [19100.0, 1.0], [19500.0, 5.0], [19900.0, 2.0], [20700.0, 1.0], [21500.0, 1.0], [21900.0, 3.0], [22300.0, 2.0], [22700.0, 2.0], [23100.0, 1.0], [23500.0, 2.0], [24300.0, 2.0], [23900.0, 1.0], [24700.0, 3.0], [25500.0, 1.0], [25100.0, 1.0], [26300.0, 6.0], [25900.0, 1.0], [26700.0, 4.0], [27100.0, 3.0], [27500.0, 1.0], [27900.0, 1.0], [28300.0, 1.0], [29100.0, 4.0], [28700.0, 2.0], [29900.0, 1.0], [30300.0, 3.0], [30700.0, 3.0], [31100.0, 1.0], [31500.0, 1.0], [31900.0, 2.0], [32700.0, 2.0], [33400.0, 6.0], [34200.0, 2.0], [35800.0, 4.0], [36600.0, 3.0], [37400.0, 1.0], [38200.0, 2.0], [39000.0, 4.0], [39800.0, 3.0], [40600.0, 3.0], [41400.0, 2.0], [42200.0, 4.0], [43000.0, 5.0], [44600.0, 3.0], [46200.0, 1.0], [47000.0, 4.0], [47800.0, 2.0], [48600.0, 1.0], [49400.0, 1.0], [50200.0, 2.0], [51000.0, 4.0], [51800.0, 1.0], [52600.0, 1.0], [53400.0, 3.0], [54200.0, 1.0], [55000.0, 3.0], [55800.0, 1.0], [56600.0, 4.0], [57400.0, 1.0], [58200.0, 6.0], [59000.0, 3.0], [59800.0, 2.0], [60600.0, 3.0], [61400.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 62300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 370.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 730.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 730.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 370.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 92.1584699453552, "minX": 1.70682402E12, "maxY": 642.151581243184, "series": [{"data": [[1.70682402E12, 642.151581243184], [1.70682408E12, 92.1584699453552]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70682408E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3982.0, "minX": 1.0, "maxY": 62382.0, "series": [{"data": [[2.0, 61816.0], [3.0, 62382.0], [4.0, 61426.0], [5.0, 62084.0], [6.0, 62096.0], [7.0, 62168.0], [9.0, 61981.0], [10.0, 61164.0], [11.0, 61712.0], [12.0, 60886.0], [13.0, 61470.0], [14.0, 60952.0], [15.0, 61233.0], [16.0, 61789.0], [17.0, 60861.0], [18.0, 61653.0], [19.0, 61658.0], [20.0, 60654.0], [22.0, 60784.0], [23.0, 61567.0], [24.0, 61376.0], [25.0, 61296.0], [26.0, 61206.0], [27.0, 60760.0], [28.0, 60399.0], [30.0, 60779.0], [31.0, 60393.0], [33.0, 61287.0], [32.0, 60356.0], [35.0, 60496.0], [34.0, 60202.0], [37.0, 61088.0], [36.0, 60442.0], [38.0, 60699.0], [41.0, 60548.0], [40.0, 60314.0], [43.0, 60475.0], [42.0, 59910.0], [45.0, 59634.0], [44.0, 60203.0], [47.0, 59639.0], [46.0, 59871.0], [49.0, 59550.0], [48.0, 60010.0], [50.0, 60286.0], [53.0, 59911.333333333336], [55.0, 59374.0], [54.0, 59595.0], [57.0, 60188.0], [56.0, 59364.0], [59.0, 59515.0], [58.0, 59813.0], [61.0, 59696.0], [60.0, 59698.0], [63.0, 59132.0], [62.0, 59042.0], [67.0, 59225.0], [65.0, 59586.0], [64.0, 59776.0], [71.0, 58841.666666666664], [68.0, 58668.0], [75.0, 58734.0], [74.0, 58476.0], [73.0, 59399.5], [79.0, 58760.0], [78.0, 59052.0], [77.0, 58669.5], [83.0, 58990.0], [82.0, 58939.0], [81.0, 58422.0], [80.0, 58083.0], [87.0, 58212.0], [86.0, 58495.0], [85.0, 58985.0], [84.0, 58253.0], [91.0, 58788.0], [90.0, 58179.666666666664], [95.0, 57992.0], [94.0, 58092.0], [93.0, 57885.0], [92.0, 58238.0], [98.0, 57566.0], [97.0, 58051.0], [96.0, 58294.0], [102.0, 57592.0], [101.0, 58088.0], [100.0, 57986.5], [107.0, 57154.0], [106.0, 57701.0], [105.0, 57131.0], [104.0, 57552.5], [111.0, 57713.0], [110.0, 57761.0], [109.0, 57886.0], [108.0, 57315.0], [115.0, 56575.0], [114.0, 57306.0], [113.0, 57537.0], [112.0, 57582.0], [119.0, 56863.0], [117.0, 56576.0], [123.0, 56651.0], [122.0, 57188.0], [121.0, 56976.0], [120.0, 56418.0], [127.0, 56259.0], [126.0, 56525.0], [125.0, 57112.0], [124.0, 56441.0], [135.0, 56885.0], [134.0, 56808.0], [133.0, 56968.333333333336], [130.0, 56712.0], [129.0, 56640.0], [128.0, 56911.0], [143.0, 56661.0], [142.0, 56056.0], [141.0, 56240.0], [140.0, 56310.0], [139.0, 56428.0], [137.0, 56218.5], [151.0, 55555.0], [150.0, 55995.0], [149.0, 55652.0], [148.0, 56501.0], [147.0, 56585.0], [146.0, 56581.0], [145.0, 55732.0], [144.0, 55758.0], [159.0, 55535.0], [158.0, 56007.0], [157.0, 55808.0], [156.0, 55272.0], [155.0, 55370.0], [154.0, 56321.0], [153.0, 56391.0], [152.0, 55469.0], [167.0, 54574.0], [166.0, 54758.0], [165.0, 55783.0], [164.0, 55028.0], [163.0, 55145.0], [162.0, 55122.0], [161.0, 55319.0], [160.0, 55509.0], [174.0, 54572.0], [173.0, 54831.333333333336], [170.0, 54572.0], [169.0, 55000.0], [168.0, 54663.0], [183.0, 54977.0], [182.0, 54213.0], [181.0, 54916.0], [180.0, 54891.0], [179.0, 54342.0], [178.0, 55181.0], [177.0, 54889.0], [176.0, 54359.0], [191.0, 53892.0], [190.0, 54786.0], [189.0, 54475.0], [188.0, 53869.0], [187.0, 54237.5], [185.0, 53891.0], [184.0, 54330.0], [199.0, 53442.0], [198.0, 54034.0], [197.0, 54135.0], [196.0, 53635.0], [195.0, 53641.0], [194.0, 54503.0], [193.0, 54606.0], [192.0, 54028.0], [207.0, 53582.0], [205.0, 53968.0], [204.0, 53379.0], [202.0, 53578.0], [215.0, 53118.0], [214.0, 53114.0], [213.0, 52856.0], [212.0, 52674.0], [211.0, 53162.0], [210.0, 53711.0], [209.0, 53838.0], [208.0, 53180.0], [223.0, 52957.0], [222.0, 52337.0], [221.0, 52512.0], [220.0, 53184.0], [219.0, 52980.5], [217.0, 52830.0], [231.0, 52335.0], [230.0, 51761.0], [229.0, 52788.0], [228.0, 52520.0], [227.0, 52061.0], [226.0, 52889.0], [225.0, 52144.0], [224.0, 52266.0], [239.0, 52166.0], [238.0, 51741.0], [237.0, 52153.0], [236.0, 52188.0], [235.0, 52368.0], [234.0, 51953.0], [233.0, 52210.0], [232.0, 52404.0], [247.0, 51311.0], [246.0, 51585.0], [245.0, 51157.0], [244.0, 51098.0], [242.0, 51808.0], [241.0, 51619.0], [240.0, 52180.0], [255.0, 50781.0], [254.0, 50645.0], [253.0, 51195.0], [252.0, 51567.0], [251.0, 51241.5], [249.0, 50861.0], [270.0, 50279.0], [271.0, 49921.0], [269.0, 50460.0], [268.0, 50579.0], [267.0, 50150.0], [266.0, 50858.5], [264.0, 50837.0], [263.0, 50904.0], [257.0, 50516.0], [256.0, 51091.0], [259.0, 50463.0], [258.0, 50919.0], [262.0, 50817.0], [261.0, 50860.0], [286.0, 50090.0], [287.0, 49259.0], [285.0, 49554.0], [284.0, 50028.0], [283.0, 49192.0], [282.0, 49786.5], [280.0, 49769.0], [279.0, 49620.0], [273.0, 50407.0], [272.0, 49879.0], [275.0, 50190.0], [274.0, 50050.0], [278.0, 49736.0], [277.0, 50455.0], [276.0, 50307.0], [302.0, 48970.0], [303.0, 48455.0], [301.0, 48406.0], [300.0, 48634.0], [299.0, 48537.0], [298.0, 48891.0], [297.0, 48700.0], [296.0, 49146.0], [295.0, 49091.0], [289.0, 49573.0], [288.0, 49323.0], [291.0, 49485.0], [290.0, 49735.0], [294.0, 49625.0], [293.0, 49613.0], [292.0, 49718.0], [317.0, 47939.0], [318.0, 48804.0], [316.0, 48494.0], [307.0, 48228.0], [306.0, 48347.0], [305.0, 48384.0], [304.0, 49040.0], [315.0, 48905.0], [314.0, 48220.0], [313.0, 48442.0], [312.0, 48161.0], [311.0, 48223.0], [310.0, 48542.0], [309.0, 48331.0], [308.0, 48490.0], [333.0, 47278.0], [334.0, 47831.0], [332.0, 47841.0], [323.0, 48225.0], [322.0, 47954.0], [321.0, 48434.0], [320.0, 48090.5], [331.0, 48193.0], [330.0, 48154.0], [329.0, 48228.0], [328.0, 48200.0], [327.0, 48165.0], [326.0, 47654.0], [325.0, 48154.0], [350.0, 46592.0], [351.0, 46946.0], [349.0, 46626.0], [348.0, 47491.0], [347.0, 47509.0], [346.0, 47050.0], [345.0, 47016.0], [344.0, 46879.0], [343.0, 47089.0], [336.0, 47277.5], [339.0, 47213.0], [338.0, 47425.5], [342.0, 47592.0], [341.0, 46932.0], [340.0, 47129.0], [365.0, 46788.0], [367.0, 46178.0], [364.0, 46823.0], [355.0, 46879.5], [353.0, 46995.0], [352.0, 47362.0], [363.0, 46542.0], [362.0, 46637.0], [360.0, 46245.0], [359.0, 46584.0], [358.0, 46871.0], [356.0, 47039.0], [382.0, 44725.0], [383.0, 44748.0], [381.0, 44220.0], [380.0, 44181.0], [379.0, 44367.0], [378.0, 44244.0], [377.0, 44738.0], [376.0, 44433.0], [375.0, 44765.0], [369.0, 46335.0], [368.0, 46442.5], [371.0, 44618.0], [370.0, 44382.0], [373.0, 44794.0], [372.0, 45110.0], [397.0, 43727.0], [399.0, 43304.5], [396.0, 44285.0], [387.0, 44641.0], [386.0, 44138.5], [384.0, 44108.0], [395.0, 43488.0], [394.0, 43453.0], [393.0, 43462.0], [392.0, 44391.0], [391.0, 44154.0], [390.0, 43866.5], [388.0, 44490.0], [414.0, 43115.0], [415.0, 42549.0], [413.0, 43103.0], [412.0, 43482.0], [411.0, 43458.0], [410.0, 42597.0], [409.0, 43064.0], [408.0, 43788.0], [407.0, 42867.0], [401.0, 43087.0], [400.0, 43058.0], [403.0, 43577.0], [402.0, 43308.0], [406.0, 43763.0], [405.0, 43409.5], [430.0, 42643.0], [431.0, 41854.0], [429.0, 42686.0], [428.0, 42356.0], [427.0, 42790.0], [426.0, 42287.0], [425.0, 41909.0], [424.0, 42947.0], [423.0, 42323.0], [417.0, 43047.0], [416.0, 42271.0], [419.0, 42543.0], [418.0, 42927.0], [422.0, 42498.0], [420.0, 43080.0], [446.0, 42049.0], [447.0, 41492.0], [445.0, 41513.0], [444.0, 42084.0], [443.0, 41543.0], [442.0, 42096.0], [441.0, 41929.0], [440.0, 41459.0], [439.0, 41697.0], [433.0, 42248.0], [432.0, 41798.0], [435.0, 41886.0], [434.0, 41736.0], [438.0, 42126.0], [437.0, 41862.0], [436.0, 42365.0], [451.0, 40825.0], [462.0, 40443.0], [461.0, 40454.0], [450.0, 41088.5], [448.0, 41384.0], [459.0, 40562.0], [457.0, 41218.0], [456.0, 40981.0], [455.0, 41295.0], [454.0, 40816.0], [453.0, 41331.0], [452.0, 40988.0], [467.0, 40579.0], [479.0, 40000.333333333336], [476.0, 39853.0], [466.0, 40709.0], [465.0, 40730.0], [464.0, 40406.5], [475.0, 39528.0], [474.0, 39599.0], [473.0, 40071.5], [471.0, 40349.0], [470.0, 40278.0], [469.0, 40481.0], [468.0, 40645.0], [493.0, 39782.0], [495.0, 39525.0], [492.0, 39245.0], [483.0, 40186.0], [482.0, 39236.0], [481.0, 39430.0], [480.0, 39462.0], [491.0, 39038.0], [490.0, 39526.0], [489.0, 39409.0], [488.0, 39514.0], [487.0, 39779.0], [486.0, 39818.0], [485.0, 39899.5], [509.0, 38901.0], [510.0, 37984.0], [508.0, 38177.0], [498.0, 38678.0], [497.0, 39097.0], [496.0, 38824.0], [507.0, 38354.0], [506.0, 39184.0], [505.0, 39017.0], [504.0, 38992.0], [503.0, 39250.0], [502.0, 38783.0], [501.0, 39068.0], [500.0, 38990.0], [537.0, 37082.0], [541.0, 37385.0], [542.0, 36705.0], [529.0, 36903.0], [528.0, 37406.5], [531.0, 37517.0], [530.0, 36916.0], [533.0, 37189.0], [532.0, 37285.0], [540.0, 36424.0], [539.0, 37393.0], [538.0, 36754.0], [536.0, 37559.0], [519.0, 37553.0], [518.0, 37558.0], [517.0, 38088.0], [516.0, 38256.0], [515.0, 37918.0], [514.0, 38506.0], [513.0, 37804.0], [512.0, 37942.5], [526.0, 37573.0], [525.0, 37980.0], [524.0, 38061.0], [523.0, 37230.0], [522.0, 37641.0], [521.0, 37449.0], [520.0, 37859.0], [535.0, 37635.0], [534.0, 37620.0], [569.0, 36188.5], [573.0, 35857.0], [574.0, 36109.0], [561.0, 36336.0], [560.0, 36123.0], [563.0, 36233.0], [562.0, 35921.0], [572.0, 36321.0], [571.0, 36391.0], [570.0, 35947.0], [559.0, 36884.0], [544.0, 36821.0], [546.0, 36590.0], [545.0, 36817.0], [548.0, 36564.0], [547.0, 36183.0], [551.0, 36669.0], [549.0, 37087.0], [558.0, 36304.0], [557.0, 36878.0], [556.0, 36763.0], [555.0, 36385.0], [554.0, 36011.0], [553.0, 36646.0], [552.0, 36642.0], [567.0, 36253.0], [566.0, 36352.0], [565.0, 36686.0], [564.0, 35850.0], [601.0, 34689.0], [606.0, 34021.0], [607.0, 33474.0], [592.0, 34852.0], [594.0, 34111.0], [593.0, 34222.0], [597.0, 34274.0], [596.0, 34465.5], [604.0, 34122.0], [603.0, 33893.0], [602.0, 34091.0], [600.0, 34710.0], [583.0, 35542.0], [582.0, 35561.0], [581.0, 35705.0], [579.0, 35727.0], [578.0, 36147.75], [591.0, 34450.5], [589.0, 35183.0], [588.0, 34632.0], [587.0, 35340.0], [586.0, 34552.0], [585.0, 35156.0], [584.0, 35818.0], [599.0, 34322.0], [598.0, 34376.0], [636.0, 32286.0], [639.0, 32184.0], [625.0, 32725.0], [624.0, 33335.0], [627.0, 32450.0], [626.0, 33074.0], [629.0, 33220.0], [628.0, 33298.0], [638.0, 31755.0], [637.0, 31783.0], [635.0, 32604.0], [634.0, 32780.0], [633.0, 32601.0], [632.0, 32470.0], [620.0, 33023.0], [609.0, 33476.0], [608.0, 34135.0], [611.0, 33259.0], [610.0, 33676.0], [613.0, 33878.0], [612.0, 33486.0], [615.0, 33280.0], [614.0, 33441.0], [619.0, 33682.0], [618.0, 33434.0], [617.0, 33503.0], [616.0, 32924.0], [631.0, 32460.0], [630.0, 33169.0], [668.0, 30505.0], [671.0, 30638.0], [656.0, 31193.0], [659.0, 30982.0], [657.0, 32081.0], [661.0, 31638.0], [660.0, 31523.5], [670.0, 30349.0], [669.0, 30735.0], [667.0, 30852.0], [666.0, 30736.0], [665.0, 31471.0], [664.0, 30902.0], [654.0, 31368.0], [641.0, 32053.0], [643.0, 31792.0], [642.0, 32190.0], [645.0, 32006.0], [644.0, 31529.0], [647.0, 32104.0], [646.0, 31842.0], [653.0, 31740.0], [652.0, 31755.0], [651.0, 32005.0], [649.0, 31964.0], [648.0, 31626.0], [663.0, 31394.0], [662.0, 31647.0], [697.0, 28885.0], [701.0, 29229.0], [702.0, 29040.0], [688.0, 30010.0], [690.0, 29904.0], [689.0, 29633.0], [692.0, 29748.0], [691.0, 29170.0], [700.0, 29480.0], [699.0, 29469.0], [698.0, 29342.0], [696.0, 29117.0], [679.0, 29899.0], [677.0, 29756.0], [676.0, 30202.0], [675.0, 30379.0], [674.0, 30130.0], [673.0, 30769.0], [672.0, 30411.0], [687.0, 29123.0], [686.0, 29891.0], [684.0, 29737.0], [683.0, 30356.0], [682.0, 30241.0], [681.0, 30229.0], [680.0, 29881.0], [695.0, 29756.5], [693.0, 29887.0], [728.0, 27066.0], [732.0, 27245.0], [735.0, 26817.0], [721.0, 27845.0], [720.0, 27174.0], [724.0, 27302.0], [722.0, 27881.0], [734.0, 26774.0], [733.0, 26556.0], [731.0, 26658.0], [730.0, 27480.0], [729.0, 27325.0], [719.0, 27823.0], [706.0, 28570.0], [705.0, 28885.0], [708.0, 29119.0], [707.0, 28739.0], [711.0, 27664.0], [710.0, 28696.5], [717.0, 27621.0], [716.0, 27257.0], [715.0, 28044.0], [713.0, 27909.0], [712.0, 27466.0], [727.0, 27150.0], [726.0, 27478.5], [760.0, 26492.0], [764.0, 26282.0], [767.0, 26104.0], [755.0, 26703.0], [754.0, 26472.333333333332], [766.0, 25648.0], [765.0, 26186.0], [763.0, 25718.0], [762.0, 26350.0], [761.0, 26125.0], [751.0, 26779.0], [736.0, 26818.0], [738.0, 27077.0], [737.0, 26350.0], [741.0, 26574.0], [740.0, 26789.0], [743.0, 26251.0], [742.0, 27095.0], [750.0, 26387.0], [749.0, 26326.0], [748.0, 26256.0], [747.0, 26621.5], [745.0, 26547.0], [759.0, 26243.5], [757.0, 25966.5], [796.0, 24111.0], [799.0, 23814.0], [785.0, 24617.0], [784.0, 24463.0], [787.0, 24385.0], [786.0, 25082.0], [789.0, 24715.0], [788.0, 25011.0], [798.0, 23479.0], [797.0, 24276.0], [795.0, 24335.0], [794.0, 23958.0], [793.0, 23825.0], [792.0, 24025.0], [783.0, 24540.0], [768.0, 25445.0], [771.0, 25435.0], [770.0, 25241.5], [773.0, 25294.0], [772.0, 25011.0], [775.0, 25773.0], [774.0, 25846.0], [782.0, 24724.0], [781.0, 25526.0], [780.0, 24750.0], [779.0, 25354.0], [778.0, 25257.0], [776.0, 24939.0], [791.0, 24040.0], [790.0, 24815.0], [828.0, 22019.0], [831.0, 22135.0], [817.0, 22386.0], [816.0, 23185.0], [819.0, 22894.0], [818.0, 22101.0], [821.0, 22754.0], [820.0, 22485.0], [830.0, 21858.0], [829.0, 21569.0], [827.0, 21824.0], [826.0, 21817.0], [825.0, 22571.0], [824.0, 22342.0], [815.0, 22583.0], [802.0, 23450.0], [801.0, 24103.0], [805.0, 23649.0], [804.0, 23504.0], [807.0, 23836.0], [806.0, 23852.0], [814.0, 22886.0], [813.0, 22683.0], [812.0, 22795.0], [811.0, 22594.0], [810.0, 23585.0], [809.0, 23793.0], [808.0, 22950.0], [823.0, 21919.0], [822.0, 22439.0], [860.0, 20054.0], [863.0, 19993.0], [848.0, 21494.0], [851.0, 21078.5], [849.0, 21099.0], [853.0, 20903.0], [852.0, 20602.0], [862.0, 20461.0], [861.0, 20668.0], [859.0, 20901.0], [858.0, 20803.0], [857.0, 20223.0], [856.0, 20836.0], [847.0, 21807.0], [833.0, 22058.0], [832.0, 22100.0], [835.0, 21899.0], [834.0, 21461.0], [837.0, 21763.0], [836.0, 22081.0], [839.0, 21723.0], [838.0, 21980.0], [846.0, 21225.0], [845.0, 20968.0], [844.0, 21853.0], [843.0, 21586.5], [841.0, 21954.0], [840.0, 21290.0], [855.0, 20780.0], [854.0, 21233.0], [892.0, 18953.0], [884.0, 19719.0], [895.0, 19476.666666666668], [881.0, 19079.0], [880.0, 19835.0], [883.0, 19315.0], [882.0, 19666.0], [891.0, 19247.0], [889.0, 19577.0], [888.0, 19768.0], [871.0, 19464.0], [870.0, 20024.333333333332], [867.0, 20150.5], [865.0, 20252.0], [864.0, 20043.0], [879.0, 19490.5], [877.0, 19505.0], [876.0, 19771.0], [875.0, 19605.0], [874.0, 20179.0], [873.0, 20197.0], [872.0, 20272.0], [887.0, 18953.0], [886.0, 19589.0], [885.0, 19846.0], [921.0, 17261.0], [926.0, 17713.0], [927.0, 16979.0], [915.0, 18286.0], [912.0, 18196.0], [917.0, 18388.0], [916.0, 18574.666666666668], [924.0, 17413.0], [923.0, 17424.0], [922.0, 17546.0], [920.0, 17639.0], [900.0, 18895.0], [899.0, 19281.0], [898.0, 19366.0], [897.0, 18662.0], [896.0, 19389.0], [911.0, 18398.0], [910.0, 18764.0], [909.0, 18768.0], [908.0, 18347.0], [907.0, 18791.0], [906.0, 18977.8], [904.0, 18850.0], [919.0, 17656.0], [918.0, 18316.0], [952.0, 16207.0], [956.0, 15631.0], [959.0, 15560.0], [945.0, 17065.0], [944.0, 17009.0], [948.0, 16723.0], [947.0, 16815.5], [958.0, 15633.0], [957.0, 16229.0], [955.0, 15680.0], [954.0, 15637.0], [953.0, 16378.0], [943.0, 16635.0], [928.0, 17176.0], [931.0, 17329.5], [929.0, 17453.0], [933.0, 17679.0], [932.0, 16917.0], [935.0, 16651.0], [934.0, 17593.0], [942.0, 16330.0], [941.0, 16961.0], [940.0, 16689.0], [939.0, 16591.0], [938.0, 17439.0], [937.0, 17186.0], [936.0, 16773.0], [951.0, 16364.5], [949.0, 16893.0], [985.0, 13921.0], [990.0, 14692.0], [991.0, 14091.0], [977.0, 14639.0], [976.0, 14539.0], [979.0, 14747.0], [978.0, 15285.0], [981.0, 14622.0], [980.0, 14331.0], [989.0, 14604.0], [988.0, 14124.0], [987.0, 14267.0], [984.0, 14668.0], [967.0, 15673.0], [966.0, 15583.0], [965.0, 15586.5], [963.0, 15513.0], [962.0, 16199.0], [961.0, 15915.0], [960.0, 15524.0], [975.0, 15250.0], [974.0, 15203.5], [972.0, 15379.0], [971.0, 15290.0], [970.0, 14707.0], [969.0, 15359.0], [983.0, 14943.0], [982.0, 14493.0], [1017.0, 11928.0], [1022.0, 11851.5], [1023.0, 11863.0], [1008.0, 13239.0], [1010.0, 12590.0], [1009.0, 12976.0], [1012.0, 12740.0], [1011.0, 13035.0], [1020.0, 12289.0], [1019.0, 12390.0], [1018.0, 11968.0], [1016.0, 12019.0], [999.0, 13215.0], [998.0, 14072.0], [997.0, 14067.0], [996.0, 14286.0], [995.0, 13749.0], [994.0, 14102.0], [993.0, 13618.0], [992.0, 14345.0], [1007.0, 13305.0], [1006.0, 12825.0], [1005.0, 12828.0], [1004.0, 13076.0], [1003.0, 13692.0], [1002.0, 12889.0], [1001.0, 13320.0], [1000.0, 14087.0], [1014.0, 12149.0], [1013.0, 12987.0], [1078.0, 7761.0], [1074.0, 9266.0], [1082.0, 8396.0], [1056.0, 9928.0], [1058.0, 9403.0], [1060.0, 9520.0], [1062.0, 9687.0], [1064.0, 8820.0], [1066.0, 9169.0], [1068.0, 9072.0], [1070.0, 8947.0], [1086.0, 7977.0], [1080.0, 8245.0], [1076.0, 9177.0], [1072.0, 8862.0], [1026.0, 11564.0], [1028.0, 11601.0], [1030.0, 10703.0], [1034.0, 11390.0], [1036.0, 10708.0], [1038.0, 10867.0], [1054.0, 9589.0], [1052.0, 10024.5], [1050.0, 10094.0], [1048.0, 10495.666666666666], [1044.0, 10024.0], [1042.0, 10493.5], [1040.0, 10996.0], [1098.0, 4641.0], [1100.0, 4908.0], [1096.0, 4922.0], [1094.0, 7553.0], [1092.0, 7146.0], [1090.0, 7291.0], [1088.0, 7371.0], [1085.0, 7841.666666666667], [1087.0, 7709.0], [1057.0, 10190.0], [1059.0, 9212.0], [1061.0, 9976.0], [1063.0, 9692.0], [1065.0, 9128.0], [1067.0, 9788.0], [1069.0, 8886.0], [1081.0, 8236.0], [1079.0, 7931.0], [1077.0, 8385.0], [1075.0, 9140.0], [1073.0, 8419.0], [1055.0, 9895.0], [1025.0, 11832.0], [1027.0, 11608.0], [1029.0, 11261.0], [1033.0, 11236.0], [1031.0, 11570.0], [1035.0, 11047.0], [1037.0, 10991.0], [1039.0, 10675.0], [1053.0, 9645.0], [1049.0, 9943.0], [1045.0, 10792.0], [1043.0, 10049.0], [1097.0, 4139.0], [1099.0, 3982.0], [1095.0, 6847.0], [1093.0, 7571.0], [1091.0, 7794.0], [1089.0, 7903.0], [1.0, 61414.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[550.652727272727, 36077.962727272745]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 597.8, "minX": 1.70682402E12, "maxY": 6846.933333333333, "series": [{"data": [[1.70682402E12, 6846.933333333333], [1.70682408E12, 1366.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70682402E12, 2995.5333333333333], [1.70682408E12, 597.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70682408E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 31664.45583424207, "minX": 1.70682402E12, "maxY": 58193.732240437166, "series": [{"data": [[1.70682402E12, 31664.45583424207], [1.70682408E12, 58193.732240437166]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70682408E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 31646.63140676115, "minX": 1.70682402E12, "maxY": 58183.677595628404, "series": [{"data": [[1.70682402E12, 31646.63140676115], [1.70682408E12, 58183.677595628404]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70682408E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3017.6706652126545, "minX": 1.70682402E12, "maxY": 3420.7322404371594, "series": [{"data": [[1.70682402E12, 3017.6706652126545], [1.70682408E12, 3420.7322404371594]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70682408E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3982.0, "minX": 1.70682402E12, "maxY": 44921.0, "series": [{"data": [[1.70682402E12, 44921.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70682402E12, 3982.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70682402E12, 41681.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70682402E12, 44615.21]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70682402E12, 26822.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70682402E12, 43213.04999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70682402E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4390.0, "minX": 1.0, "maxY": 61816.0, "series": [{"data": [[10.0, 44609.0], [11.0, 27664.0], [12.0, 11965.5], [13.0, 30769.0], [15.0, 9072.0], [1.0, 4908.0], [4.0, 4390.0], [16.0, 22774.5], [17.0, 27484.5], [18.0, 14982.0], [19.0, 9943.0], [20.0, 31168.5], [21.0, 17009.0], [22.0, 41026.5], [23.0, 34122.0], [6.0, 7422.0], [24.0, 33007.5], [26.0, 31817.0], [27.0, 27690.0], [28.0, 26822.5], [7.0, 34632.0], [31.0, 36878.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 46939.0], [10.0, 45110.0], [11.0, 61816.0], [1.0, 46335.0], [16.0, 53035.5], [19.0, 49921.0], [20.0, 52159.5], [21.0, 51508.5], [22.0, 59073.5], [25.0, 53874.0], [26.0, 58962.0], [27.0, 54968.5], [29.0, 56007.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4389.5, "minX": 1.0, "maxY": 61816.0, "series": [{"data": [[10.0, 44609.0], [11.0, 27664.0], [12.0, 11926.5], [13.0, 30769.0], [15.0, 8947.0], [1.0, 4904.0], [4.0, 4389.5], [16.0, 22774.5], [17.0, 27484.5], [18.0, 14982.0], [19.0, 9928.0], [20.0, 30872.0], [21.0, 16917.0], [22.0, 41026.5], [23.0, 34122.0], [6.0, 7422.0], [24.0, 33007.5], [26.0, 31787.5], [27.0, 27452.0], [28.0, 26822.5], [7.0, 34632.0], [31.0, 36878.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 46918.0], [10.0, 45110.0], [11.0, 61816.0], [1.0, 46335.0], [16.0, 53035.5], [19.0, 49921.0], [20.0, 52159.0], [21.0, 51508.5], [22.0, 59073.5], [25.0, 53869.0], [26.0, 58962.0], [27.0, 54968.0], [29.0, 55968.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 18.333333333333332, "minX": 1.70682402E12, "maxY": 18.333333333333332, "series": [{"data": [[1.70682402E12, 18.333333333333332]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70682402E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.05, "minX": 1.70682402E12, "maxY": 15.283333333333333, "series": [{"data": [[1.70682402E12, 15.283333333333333], [1.70682408E12, 3.05]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70682408E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.05, "minX": 1.70682402E12, "maxY": 12.166666666666666, "series": [{"data": [[1.70682402E12, 12.166666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.70682402E12, 3.1166666666666667], [1.70682408E12, 3.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70682408E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.05, "minX": 1.70682402E12, "maxY": 12.166666666666666, "series": [{"data": [[1.70682402E12, 12.166666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70682402E12, 3.1166666666666667], [1.70682408E12, 3.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70682408E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

